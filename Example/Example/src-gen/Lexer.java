// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/Lexer.gold"
import gold.structures.automaton.*;
import gold.util.*;
import gold.visualization.automaton.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class Lexer {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=5;
      Object lexer=$fix(Lexer.createTransducer());
      $line=6;
      Lexer.testLexer($cast(gold.structures.automaton.ITransducer.class,lexer));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"main",$line);
    }
  }
  public static Object testLexer(ITransducer M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=12;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=14;
      Object input=$fix("");
      $line=17;
      System.out.println($message(new Object[]{"----------------------------"}));
      $line=18;
      System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
      $line=19;
      System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
      $line=20;
      Object string=$fix(((java.util.Scanner)sc).nextLine());
      $line=24;
      while (true) {
        if (!(!$opEqualY(string,"EXIT"))) break;
        $line=28;
        while (true) {
          if (!(!$opEqualY($invokeMethod("charAt",string,new Object[]{0}),'$'))) break;
          $line=29;
          input=$fix($opAdditY($opAdditY(input,string)," "));
          $line=30;
          string=$fix(((java.util.Scanner)sc).nextLine());
        }
        $line=33;
        Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,input)));
        $line=34;
        Object tokenStream=$fix(((gold.structures.automaton.ITransducer)M).getOutputString());
        $line=36;
        System.out.println($message(new Object[]{$opAdditY($opAdditY("The lexer did ",(($bool(result))?(""):("not ")))," accept the string.")}));
        $line=37;
        if ($bool(result)) {
          $line=37;
          System.out.println($message(new Object[]{$opAdditY("Token Stream: ",tokenStream)}));
        }
        $line=39;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=41;
        System.out.println($message(new Object[]{"Enter one or more lines. End with a single line with $"}));
        $line=42;
        System.out.println($message(new Object[]{"If you want to stop testing, enter EXIT"}));
        $line=43;
        string=$fix(((java.util.Scanner)sc).nextLine());
      }
      $line=46;
      System.out.println($message(new Object[]{"Good bye"}));
      $line=47;
      System.out.println($message(new Object[]{""}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"testLexer",$line);
    }
    return $result;
  }
  public static Object names=null;
  public static ITransducer createTransducer() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=60;
      Object states=$fix(GCollections.asSet("I"));
      $line=61;
      Object keywords=$fix(GCollections.asSet("ROBOT_R","VARS","BEGIN","assignVar","move","turn","face","put","pick","moveDir","moveInDir","skip","facing","not","END"));
      $line=62;
      for (Object $v1:GCollections.unmodifiableCollection(keywords)) {
        Object token=$v1;
        $line=63;
        states=$fix($opUnionY(states,GCollections.asSet(token)));
        $line=64;
        Object sub=$fix($opAdditY($invokeMethod("charAt",token,new Object[]{0}),""));
        $line=65;
        for (int i=$int(1); i<=$int($opSubtrY($opAbsolY(token),1)); i++) {
          $line=66;
          states=$fix($opUnionY(states,GCollections.asSet(sub)));
          $line=67;
          sub=$fix($opAdditY(sub,$invokeMethod("charAt",token,new Object[]{i})));
        }
      }
      $line=70;
      Object Q=$fix($opUnionY(GCollections.asSet("I","Id","Num","Err"),states));
      $line=72;
      Object \u03A3=$fix($opUnionY($opUnionY($opUnionY($opIntvlY('0','9'),$opIntvlY('a','z')),GCollections.asSet('(',')',' ',';','{','}','[',']',',','_',':')),$opIntvlY('A','Z')));
      $line=73;
      Object Out=$fix($opUnionY($opUnionY(\u03A3,$opIntvlY('A','Z')),GCollections.asSet('?','!')));
      $line=74;
      Object q_0=$fix("I");
      $line=75;
      Object F=$fix(GCollections.asSet("I"));
      $line=76;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,Out,q_0,F,new GMethod(Lexer.class,"\u03B4"),new GMethod(Lexer.class,"g"),new GMethod(Lexer.class,"h")});
      if (true) break $try;
      $line=77;
      $rethrow(new RuntimeException("The function \"createTransducer()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"createTransducer",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=80;
      Object keywords=$fix(GCollections.asSet("ROBOT_R","VARS","BEGIN","assignVar","move","turn","face","put","pick","moveDir","moveInDir","skip","facing","not","END"));
      $line=81;
      Object unary=$fix(GCollections.asSet("move","turn","face","moveDir","facing","not"));
      $line=82;
      Object set=$fix(GCollections.emptySet());
      $line=83;
      for (Object $v2:GCollections.unmodifiableCollection(keywords)) {
        Object token=$v2;
        $line=84;
        set=$fix($opUnionY(set,Lexer.x(token)));
      }
      $line=86;
      if ($bool($opEqualY(q,"Err"))) {
        $line=86;
        $result="Err";
        if (true) break $try;
      }
      else {
        $line=87;
        if ($opMembrY(\u03C3,GCollections.asSet('(',')',' ','{','}','[',']',';',','))) {
          $line=87;
          $result="I";
          if (true) break $try;
        }
        else {
          $line=88;
          if (($opEqualY(q,"I")&&$opMembrY(\u03C3,GCollections.asSet('R','V','B','a','m','t','f','p','s','n','E')))) {
            $line=88;
            $result=$invokeMethod(String.class,"valueOf",true,null,new Object[]{\u03C3});
            if (true) break $try;
          }
          else {
            $line=89;
            if (($opEqualY(q,"I")&&$opMembrY(\u03C3,$opIntvlY('0','9')))) {
              $line=89;
              $result="Num";
              if (true) break $try;
            }
            else {
              $line=90;
              if (($opEqualY(q,"Num")&&$opMembrY(\u03C3,$opIntvlY('0','9')))) {
                $line=90;
                $result="Num";
                if (true) break $try;
              }
              else {
                $line=91;
                if (($opEqualY(q,"Num")&&$opMembrY(\u03C3,$opUnionY($opIntvlY('a','z'),$opIntvlY('A','Z'))))) {
                  $line=91;
                  $result="Err";
                  if (true) break $try;
                }
                else {
                  $line=93;
                  if (($opMembrY(q,set)&&$opMembrY($opAdditY(q,\u03C3),set))) {
                    $line=93;
                    $result=$opAdditY(q,\u03C3);
                    if (true) break $try;
                  }
                  else {
                    $line=94;
                    if (($opMembrY(q,set)&&!$opMembrY($opAdditY(q,\u03C3),set))) {
                      $line=94;
                      $result="Err";
                      if (true) break $try;
                    }
                    else {
                      $line=96;
                      $result="Id";
                      if (true) break $try;
                    }
                  }
                }
              }
            }
          }
        }
      }
      $line=98;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=103;
      $result="";
      if (true) break $try;
      $line=104;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=107;
      String s=null;
      s=$defaultValue(String.class);
      $line=108;
      s=$cast(String.class,$fix(""));
      $line=109;
      Object keywords=$fix(GCollections.asSet("ROBOT_R","VARS","BEGIN","assignVar","move","turn","face","put","pick","moveDir","moveInDir","skip","facing","not","END"));
      $line=111;
      if ((!$opMembrY(q,GCollections.asSet("Err"))&&$opMembrY(\u03C3,GCollections.asSet('(',')',' ',';','{','}','[',']',',')))) {
        $line=112;
        if (!$opMembrY(\u03C3,GCollections.asSet(' '))) {
          $line=112;
          s=$cast(String.class,$fix($invokeMethod(String.class,"valueOf",true,null,new Object[]{\u03C3})));
        }
        $line=113;
        if ($opEqualY(q,"I")) {
          $line=113;
          $result=s;
          if (true) break $try;
        }
        else {
          $line=114;
          if ($opEqualY(q,"ROBOT_R")) {
            $line=114;
            $result=$opAdditY($opAdditY("RBT",s),";");
            if (true) break $try;
          }
          else {
            $line=115;
            if ($opEqualY(q,"VARS")) {
              $line=115;
              $result=$opAdditY($opAdditY("VRS",s),":");
              if (true) break $try;
            }
            else {
              $line=116;
              if ($opEqualY(q,"BEGIN")) {
                $line=116;
                $result=$opAdditY($opAdditY("BG",s),";");
                if (true) break $try;
              }
              else {
                $line=117;
                if ($opEqualY(q,"assignVar")) {
                  $line=117;
                  $result=$opAdditY("AV",s);
                  if (true) break $try;
                }
                else {
                  $line=118;
                  if ($opEqualY(q,"move")) {
                    $line=118;
                    $result=$opAdditY("m",s);
                    if (true) break $try;
                  }
                  else {
                    $line=119;
                    if ($opEqualY(q,"turn")) {
                      $line=119;
                      $result=$opAdditY("t",s);
                      if (true) break $try;
                    }
                    else {
                      $line=120;
                      if ($opEqualY(q,"face")) {
                        $line=120;
                        $result=$opAdditY("f",s);
                        if (true) break $try;
                      }
                      else {
                        $line=121;
                        if ($opEqualY(q,"put")) {
                          $line=121;
                          $result=$opAdditY("pt",s);
                          if (true) break $try;
                        }
                        else {
                          $line=122;
                          if ($opEqualY(q,"pick")) {
                            $line=122;
                            $result=$opAdditY("pk",s);
                            if (true) break $try;
                          }
                          else {
                            $line=123;
                            if ($opEqualY(q,"moveDir")) {
                              $line=123;
                              $result=$opAdditY("MD",s);
                              if (true) break $try;
                            }
                            else {
                              $line=124;
                              if ($opEqualY(q,"moveInDir")) {
                                $line=124;
                                $result=$opAdditY("MID",s);
                                if (true) break $try;
                              }
                              else {
                                $line=125;
                                if ($opEqualY(q,"skip")) {
                                  $line=125;
                                  $result=$opAdditY("sk",s);
                                  if (true) break $try;
                                }
                                else {
                                  $line=126;
                                  if ($opEqualY(q,"facing")) {
                                    $line=126;
                                    $result=$opAdditY("f?",s);
                                    if (true) break $try;
                                  }
                                  else {
                                    $line=127;
                                    if ($opEqualY(q,"not")) {
                                      $line=127;
                                      $result=$opAdditY("!",s);
                                      if (true) break $try;
                                    }
                                    else {
                                      $line=128;
                                      if ($opEqualY(q,"END")) {
                                        $line=128;
                                        $result=$opAdditY("E",s);
                                        if (true) break $try;
                                      }
                                      else {
                                        $line=130;
                                        if ($opEqualY(q,"Num")) {
                                          $line=130;
                                          $result=$opAdditY("n",s);
                                          if (true) break $try;
                                        }
                                        else {
                                          $line=131;
                                          $result=$opAdditY("v",s);
                                          if (true) break $try;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else {
        $line=133;
        $result="";
        if (true) break $try;
      }
      $line=135;
      $result="";
      if (true) break $try;
      $line=136;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"h",$line);
    }
    return $result;
  }
  public static Object x(Object token) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=139;
      Object states=$fix(GCollections.emptySet());
      $line=140;
      states=$fix($opUnionY(states,GCollections.asSet(token)));
      $line=141;
      Object sub=$fix($opAdditY($invokeMethod("charAt",token,new Object[]{0}),""));
      $line=142;
      for (int i=$int(1); i<=$int($opSubtrY($opAbsolY(token),1)); i++) {
        $line=143;
        states=$fix($opUnionY(states,GCollections.asSet(sub)));
        $line=144;
        sub=$fix($opAdditY(sub,$invokeMethod("charAt",token,new Object[]{i})));
      }
      $line=146;
      $result=states;
      if (true) break $try;
      $line=147;
      $rethrow(new RuntimeException("The function \"x(token:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Lexer.class,"x",$line);
    }
    return $result;
  }
}
